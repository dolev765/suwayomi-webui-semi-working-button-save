================================================================================
TACHIDESK WEBUI PROJECT FILE CONTENTS EXTRACTION
================================================================================
Generated on: 2025-08-31 13:56:25
Project: Tachidesk WebUI
================================================================================

------------------------------------------------------------
FILE: package.json (current, after any edits)
PATH: C:\Users\dolev\AppData\Local\Tachidesk\webUI\package.json
------------------------------------------------------------

{
  "name": "project",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "ci": "yarn install --frozen-lockfile",
    "dev": "vite",
    "preview": "vite preview",
    "build": "vite build",
    "test": "node -e \"console.log('imagine')\"",
    "build-md5": "find build -type f | sort | xargs md5sum | awk '{ print $1 }' | tr -d '\n' | md5sum| awk '{ print $1 }' > buildZip/md5sum ",
    "build-zip": "cd build && rev=$(git rev-list HEAD --count) && echo r$rev > revision && zip -9 -r ../buildZip/Suwayomi-WebUI-r$rev *",
    "lint": "eslint src --ext .ts,.tsx,.js,.jsx --max-warnings=0 --cache",
    "createCommitChangelog": "tsx tools/scripts/release/createCommitChangelog.ts",
    "createTranslationChangelog": "tsx tools/scripts/release/createTranslationChangelog.ts",
    "createReleaseChangelog": "tsx tools/scripts/release/createReleaseChangelog.ts",
    "updateDeps": "tsx tools/scripts/updateDependencies.ts",
    "gql:codegen-base": "graphql-codegen --config gql_codegen.ts",
    "gql:codegen-formatter": "tsx tools/scripts/codegenFormatter.ts",
    "gql:codegen": "yarn gql:codegen-base && yarn gql:codegen-formatter",
    "i18n:gen-resources": "tsx tools/scripts/weblate/generatei18nResources.ts",
    "dayjs:gen-locales-array": "tsx tools/scripts/dayjs/generateDayJsLocales.ts",
    "dayjs:gen-locales-import": "tsx tools/scripts/dayjs/generateDayJsLocalesImport.ts",
    "dayjs:gen-locales": "yarn dayjs:gen-locales-array && yarn dayjs:gen-locales-import",
    "prepare": "husky"
  },
  "engines": {
    "node": "22.12.0"
  },
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": "eslint --fix"
  },
  "dependencies": {
    "@apollo/client": "3.13.9",
    "@dnd-kit/core": "6.3.1",
    "@dnd-kit/sortable": "10.0.0",
    "@dnd-kit/utilities": "3.2.2",
    "@emotion/cache": "11.14.0",
    "@emotion/react": "11.14.0",
    "@emotion/styled": "11.14.1",
    "@fontsource/roboto": "5.2.6",
    "@juggle/resize-observer": "3.4.0",
    "@loadable/component": "5.16.7",
    "@mantine/hooks": "8.2.5",
    "@mui/icons-material": "7.3.1",
    "@mui/material": "7.3.1",
    "@mui/system": "7.3.1",
    "@mui/utils": "7.3.1",
    "@mui/x-date-pickers": "8.10.0",
    "@vibrant/color": "4.0.0",
    "apollo-upload-client": "18.0.1",
    "csstype": "3.1.3",
    "dayjs": "1.11.13",
    "fast-average-color": "9.5.0",
    "file-selector": "2.1.2",
    "graphql": "16.11.0",
    "graphql-sock": "1.0.1",
    "graphql-tag": "2.12.6",
    "graphql-ws": "6.0.6",
    "i18next": "25.3.6",
    "i18next-browser-languagedetector": "8.2.0",
    "i18next-http-backend": "3.0.2",
    "jsonrepair": "3.13.0",
    "material-ui-popup-state": "5.3.6",
    "mui-nested-menu": "4.0.1",
    "node-vibrant": "4.0.3",
    "notistack": "3.0.2",
    "p-limit": "7.0.0",
    "react": "19.1.1",
    "react-dom": "19.1.1",
    "react-hotkeys-hook": "5.1.0",
    "react-i18next": "15.6.1",
    "react-lazily": "0.9.2",
    "react-router-dom": "6.26.1",
    "react-virtuoso": "4.14.0",
    "stylis": "4.3.6",
    "stylis-plugin-rtl": "2.1.1",
    "use-long-press": "3.3.0",
    "use-query-params": "2.2.1",
    "webfontloader": "1.6.28"
  },
  "devDependencies": {
    "@graphql-codegen/cli": "5.0.7",
    "@graphql-codegen/client-preset": "4.8.3",
    "@graphql-codegen/typescript-apollo-client-helpers": "3.0.1",
    "@graphql-codegen/typescript-operations": "4.6.1",
    "@types/apollo-upload-client": "18.0.0",
    "@types/jszip": "^3.4.0",
    "@types/node": "24.3.0",
    "@types/react": "19.1.10",
    "@types/react-beautiful-dnd": "13.1.8",
    "@types/react-dom": "19.1.7",
    "@types/sanitize-html": "2.16.0",
    "@types/stylis": "4.2.7",
    "@types/webfontloader": "1.6.38",
    "@types/yargs": "17.0.33",
    "@typescript-eslint/eslint-plugin": "7.16.1",
    "@typescript-eslint/parser": "7.16.1",
    "@vitejs/plugin-legacy": "7.2.1",
    "@vitejs/plugin-react-swc": "3.10.2",
    "dotenv": "17.2.1",
    "eslint": "8.57.0",
    "eslint-config-airbnb": "19.0.4",
    "eslint-config-airbnb-typescript": "18.0.0",
    "eslint-config-prettier": "9.1.0",
    "eslint-plugin-header": "3.1.1",
    "eslint-plugin-import": "2.32.0",
    "eslint-plugin-jsx-a11y": "6.10.2",
    "eslint-plugin-no-relative-import-paths": "1.6.1",
    "eslint-plugin-prettier": "5.5.4",
    "eslint-plugin-react": "7.37.5",
    "eslint-plugin-react-hooks": "4.6.2",
    "eslint-plugin-unused-imports": "3.2.0",
    "husky": "9.1.7",
    "lint-staged": "16.1.5",
    "prettier": "3.6.2",
    "syncyarnlock": "1.0.19",
    "terser": "5.43.1",
    "tsx": "4.20.4",
    "typescript": "5.9.2",
    "vite": "7.1.2",
    "vite-plugin-node-polyfills": "0.24.0",
    "vite-tsconfig-paths": "5.1.4",
    "yargs": "18.0.0"
  }
}



------------------------------------------------------------
FILE: vite.config.ts (current)
PATH: C:\Users\dolev\AppData\Local\Tachidesk\webUI\vite.config.ts
------------------------------------------------------------

/*
 * Copyright (C) Contributors to the Suwayomi project
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

/* eslint-disable import/no-extraneous-dependencies */

import path from 'path';
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react-swc';
import viteTsconfigPaths from 'vite-tsconfig-paths';
import legacy from '@vitejs/plugin-legacy';
import { nodePolyfills } from 'vite-plugin-node-polyfills';

// eslint-disable-next-line import/no-default-export
export default defineConfig(() => ({
    build: {
        outDir: 'build',
        target: 'esnext',
        rollupOptions: {
            external: []
        }
    },
    server: {
        port: 3001,
        host: true,
        hmr: {
            overlay: true,
            port: 3001,
        },
        watch: {
            usePolling: false,
        },
    },
    resolve: {
        alias: {
            '@': path.resolve(import.meta.dirname, './src'),
        },
    },
    optimizeDeps: {
        include: ['@mui/material/Tooltip'],
    },
    plugins: [
        react(),
        viteTsconfigPaths(),
        // legacy({
        //     modernPolyfills: [
        //         'es/array/to-spliced',
        //         'es/array/to-sorted',
        //         'es/array/find-last',
        //         'es/array/find-last-index',
        //         'es/object/group-by',
        //     ],
        // }),
        nodePolyfills({
            include: ['assert'],
        }),
    ],
}));



------------------------------------------------------------
FILE: .env (values redacted)
PATH: C:\Users\dolev\AppData\Local\Tachidesk\webUI\.env
------------------------------------------------------------

PORT=[REDACTED]
ALLOWED_HOSTS=[REDACTED]

VITE_SERVER_URL_DEFAULT=[REDACTED]

CODEGEN_SERVER_URL_GQL=[REDACTED]

GITHUB_TOKEN=[REDACTED]
WEBLATE_TOKEN=[REDACTED]



------------------------------------------------------------
FILE: .env.local (values redacted)
PATH: C:\Users\dolev\AppData\Local\Tachidesk\webUI\.env.local
------------------------------------------------------------

FILE NOT FOUND: C:\Users\dolev\AppData\Local\Tachidesk\webUI\.env.local


------------------------------------------------------------
FILE: .env.development (values redacted)
PATH: C:\Users\dolev\AppData\Local\Tachidesk\webUI\.env.development
------------------------------------------------------------

FILE NOT FOUND: C:\Users\dolev\AppData\Local\Tachidesk\webUI\.env.development


------------------------------------------------------------
FILE: tsconfig.json
PATH: C:\Users\dolev\AppData\Local\Tachidesk\webUI\tsconfig.json
------------------------------------------------------------

{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": [
      "ESNEXT",
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    /* Bundler mode */
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "moduleResolution": "node",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "strict": true,
    "strictNullChecks": true,
    "noUnusedLocals": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": [
    "src"
  ],
  "exclude": ["**/node_modules"],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ]
}



------------------------------------------------------------
FILE: tsconfig.node.json (if present)
PATH: C:\Users\dolev\AppData\Local\Tachidesk\webUI\tsconfig.node.json
------------------------------------------------------------

{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": [
    "vite.config.ts",
    "gql_codegen.ts"
  ]
}



------------------------------------------------------------
FILE: index.html
PATH: C:\Users\dolev\AppData\Local\Tachidesk\webUI\index.html
------------------------------------------------------------

<!DOCTYPE html>
<html>
<head>
    <title>Suwayomi</title>
    <meta name="apple-mobile-web-app-title" content="Suwayomi" />
    <meta
            name="description"
            content="A manga reader that runs tachiyomi's extensions"
    />

    <meta charset="utf-8"/>

    <meta name='viewport' content='minimum-scale=1, initial-scale=1, viewport-fit=cover, width=device-width'>
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="/site.webmanifest" crossorigin="use-credentials" />
</head>
<body>
<noscript>You need to enable JavaScript to run this app.</noscript>
<div id="root"></div>
<script type="module" src="./src/index.tsx"></script>
<script>
    const backgroundColor = (() => {
        const storageValue = window.localStorage.getItem("theme_background")
        try {
            return JSON.parse(storageValue)
        } catch (e) {
            return storageValue
        }
    })();

    if (backgroundColor) {
        document.documentElement.style.backgroundColor = backgroundColor;
    }
</script>
<!--
  This HTML file is a template.
  If you open it directly in the browser, you will see an empty page.

  You can add webfonts, meta tags, or analytics to this file.
  The build step will place the bundled scripts into the <body> tag.

  To begin the development, run `npm start` or `yarn start`.
  To create a production bundle, use `npm run build` or `yarn build`.
-->
</body>
</html>



------------------------------------------------------------
FILE: src/index.tsx (main entry point)
PATH: C:\Users\dolev\AppData\Local\Tachidesk\webUI\src\index.tsx
------------------------------------------------------------

/*
 * Copyright (C) Contributors to the Suwayomi project
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import '@/polyfill.manual';
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { App } from '@/App';
import '@/index.css';
// roboto font
import '@fontsource/roboto';
import { defaultPromiseErrorHandler } from '@/lib/DefaultPromiseErrorHandler.ts';
import '@/lib/dayjs/Setup.ts';

if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready.then((registration) => {
        registration.unregister().catch(defaultPromiseErrorHandler('unregister service workers'));
        if (caches) {
            caches.keys().then(async (names) => {
                await Promise.all(names.map((name) => caches.delete(name)));
            });
        }
    });
}

const container = document.getElementById('root');
const root = createRoot(container!);
root.render(
    <StrictMode>
        <App />
    </StrictMode>,
);



------------------------------------------------------------
FILE: src/App.tsx
PATH: C:\Users\dolev\AppData\Local\Tachidesk\webUI\src\App.tsx
------------------------------------------------------------

/*
 * Copyright (C) Contributors to the Suwayomi project
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import CssBaseline from '@mui/material/CssBaseline';
import React, { useLayoutEffect } from 'react';
import { Navigate, Route, Routes, useLocation } from 'react-router-dom';
import { loadErrorMessages, loadDevMessages } from '@apollo/client/dev';
import { loadable } from 'react-lazily/loadable';
import Box from '@mui/material/Box';
import { AppContext } from '@/base/contexts/AppContext.tsx';
import '@/i18n';
import { DefaultNavBar } from '@/features/navigation-bar/components/DefaultNavBar.tsx';
import { requestManager } from '@/lib/requests/RequestManager.ts';
import { WebUIUpdateChecker } from '@/features/app-updates/components/WebUIUpdateChecker.tsx';
import { ServerUpdateChecker } from '@/features/app-updates/components/ServerUpdateChecker.tsx';
import { lazyLoadFallback } from '@/base/utils/LazyLoad.tsx';
import { ErrorBoundary } from '@/base/components/feedback/ErrorBoundary.tsx';
import { useNavBarContext } from '@/features/navigation-bar/NavbarContext.tsx';

import { AppRoutes } from '@/base/AppRoute.constants.ts';

import { useMetadataServerSettings } from '@/features/settings/services/ServerSettingsMetadata.ts';
import { MediaQuery } from '@/base/utils/MediaQuery.tsx';
import { BrowseTab } from '@/features/browse/Browse.types.ts';

const { Browse } = loadable(() => import('@/features/browse/screens/Browse.tsx'), lazyLoadFallback);
const { DownloadQueue } = loadable(() => import('@/features/downloads/screens/DownloadQueue.tsx'), lazyLoadFallback);
const { Library } = loadable(() => import('@/features/library/screens/Library.tsx'), lazyLoadFallback);
const { Manga } = loadable(() => import('@/features/manga/screens/Manga.tsx'), lazyLoadFallback);
const { SearchAll } = loadable(() => import('@/features/global-search/screens/SearchAll.tsx'), lazyLoadFallback);
const { Settings } = loadable(() => import('@/features/settings/screens/Settings.tsx'), lazyLoadFallback);
const { About } = loadable(() => import('@/features/settings/screens/About.tsx'), lazyLoadFallback);
const { Backup } = loadable(() => import('@/features/backup/screens/Backup.tsx'), lazyLoadFallback);
const { CategorySettings } = loadable(
    () => import('@/features/category/screens/CategorySettings.tsx'),
    lazyLoadFallback,
);
const { SourceConfigure } = loadable(
    () => import('@/features/source/configuration/screens/SourceConfigure.tsx'),
    lazyLoadFallback,
);
const { SourceMangas } = loadable(() => import('@/features/source/browse/screens/SourceMangas.tsx'), lazyLoadFallback);
const { ExtensionInfo } = loadable(
    () => import('@/features/extension/info/screens/ExtensionInfo.tsx'),
    lazyLoadFallback,
);
const { Updates } = loadable(() => import('@/features/updates/screens/Updates.tsx'), lazyLoadFallback);
const { History } = loadable(() => import('@/features/history/screens/History.tsx'), lazyLoadFallback);
const { LibrarySettings } = loadable(() => import('@/features/library/screens/LibrarySettings.tsx'), lazyLoadFallback);
const { DownloadSettings } = loadable(
    () => import('@/features/downloads/screens/DownloadSettings.tsx'),
    lazyLoadFallback,
);
const { ServerSettings } = loadable(() => import('@/features/settings/screens/ServerSettings.tsx'), lazyLoadFallback);
const { BrowseSettings } = loadable(() => import('@/features/browse/screens/BrowseSettings.tsx'), lazyLoadFallback);
const { WebUISettings } = loadable(() => import('@/features/settings/screens/WebUISettings.tsx'), lazyLoadFallback);
const { Migrate } = loadable(() => import('@/features/migration/screens/Migrate.tsx'), lazyLoadFallback);
const { DeviceSetting } = loadable(() => import('@/features/device/screens/DeviceSetting.tsx'), lazyLoadFallback);
const { TrackingSettings } = loadable(
    () => import('@/features/tracker/screens/TrackingSettings.tsx'),
    lazyLoadFallback,
);
const { TrackerOAuthLogin } = loadable(
    () => import('@/features/tracker/screens/TrackerOAuthLogin.tsx'),
    lazyLoadFallback,
);
const { LibraryDuplicates } = loadable(
    () => import('@/features/library/screens/LibraryDuplicates.tsx'),
    lazyLoadFallback,
);
const { Appearance } = loadable(() => import('@/features/settings/screens/Appearance.tsx'), lazyLoadFallback);
const { GlobalReaderSettings } = loadable(
    () => import('@/features/reader/settings/screens/GlobalReaderSettings.tsx'),
    lazyLoadFallback,
);
const { More } = loadable(() => import('@/features/settings/screens/More.tsx'), lazyLoadFallback);
const { Reader } = loadable(() => import('@/features/reader/screens/Reader.tsx'), lazyLoadFallback);
const { HistorySettings } = loadable(() => import('@/features/history/screens/HistorySettings.tsx'), lazyLoadFallback);

if (process.env.NODE_ENV !== 'production') {
    // Adds messages only in a dev environment
    loadDevMessages();
    loadErrorMessages();
}

const ScrollToTop = () => {
    const { pathname } = useLocation();

    useLayoutEffect(() => {
        window.scrollTo(0, 0);
    }, [pathname]);

    return null;
};

/**
 * Creates permanent subscriptions to always have the latest data.
 *
 * E.g. in case a view is open, which does not subscribe to the download updates, finished downloads are never received
 * and thus, data of existing chapters/mangas in the cache get outdated
 */
const BackgroundSubscriptions = () => {
    // load the full download status once on startup to fill the cache
    requestManager.useGetDownloadStatus({ nextFetchPolicy: 'standby' });
    requestManager.useDownloadSubscription();
    requestManager.useUpdaterSubscription();
    requestManager.useWebUIUpdateSubscription();

    return null;
};

const MainApp = () => {
    const { navBarWidth, appBarHeight, bottomBarHeight } = useNavBarContext();
    const isMobileWidth = MediaQuery.useIsMobileWidth();

    const {
        settings: { hideHistory },
    } = useMetadataServerSettings();

    return (
        <Box
            id="appMainContainer"
            component="main"
            sx={{
                minHeight: `calc(100vh - ${appBarHeight + bottomBarHeight}px)`,
                width: `calc(100vw - (100vw - 100%) - ${navBarWidth}px)`,
                minWidth: `calc(100vw - (100vw - 100%) - ${navBarWidth}px)`,
                maxWidth: `calc(100vw - (100vw - 100%) - ${navBarWidth}px)`,
                position: 'relative',
                mt: `${appBarHeight}px`,
                pb: `calc(${bottomBarHeight}px + ${!bottomBarHeight ? 'env(safe-area-inset-bottom)' : '0px'})`,
                pr: 'env(safe-area-inset-right)',
            }}
        >
            <ErrorBoundary>
                <Routes>
                    {/* General Routes */}
                    <Route path={AppRoutes.root.match} element={<Navigate to={AppRoutes.library.path()} replace />} />
                    <Route path={AppRoutes.matchAll.match} element={<Navigate to={AppRoutes.root.path} replace />} />
                    {isMobileWidth && <Route path={AppRoutes.more.match} element={<More />} />}
                    <Route path={AppRoutes.about.match} element={<About />} />
                    <Route path={AppRoutes.settings.match}>
                        <Route index element={<Settings />} />
                        <Route path={AppRoutes.settings.childRoutes.categories.match} element={<CategorySettings />} />
                        <Route path={AppRoutes.settings.childRoutes.reader.match} element={<GlobalReaderSettings />} />
                        <Route path={AppRoutes.settings.childRoutes.library.match}>
                            <Route index element={<LibrarySettings />} />
                            <Route
                                path={AppRoutes.settings.childRoutes.library.childRoutes.duplicates.match}
                                element={<LibraryDuplicates />}
                            />
                        </Route>
                        <Route path={AppRoutes.settings.childRoutes.download.match} element={<DownloadSettings />} />
                        <Route path={AppRoutes.settings.childRoutes.backup.match} element={<Backup />} />
                        <Route path={AppRoutes.settings.childRoutes.server.match} element={<ServerSettings />} />
                        <Route path={AppRoutes.settings.childRoutes.webui.match} element={<WebUISettings />} />
                        <Route path={AppRoutes.settings.childRoutes.browse.match} element={<BrowseSettings />} />
                        <Route path={AppRoutes.settings.childRoutes.history.match} element={<HistorySettings />} />
                        <Route path={AppRoutes.settings.childRoutes.device.match} element={<DeviceSetting />} />
                        <Route path={AppRoutes.settings.childRoutes.tracking.match} element={<TrackingSettings />} />
                        <Route path={AppRoutes.settings.childRoutes.appearance.match} element={<Appearance />} />
                    </Route>

                    {/* Manga Routes */}

                    <Route path={AppRoutes.sources.match}>
                        {/* TODO: deprecated - "source" and "extension" page got merged into "browse" */}
                        <Route index element={<Navigate to={AppRoutes.browse.path(BrowseTab.SOURCES)} replace />} />
                        <Route path={AppRoutes.sources.childRoutes.browse.match} element={<SourceMangas />} />
                        <Route path={AppRoutes.sources.childRoutes.configure.match} element={<SourceConfigure />} />
                        <Route path={AppRoutes.sources.childRoutes.searchAll.match} element={<SearchAll />} />
                    </Route>
                    <Route path={AppRoutes.extension.match}>
                        <Route index element={<Navigate to={AppRoutes.browse.path(BrowseTab.EXTENSIONS)} replace />} />
                        <Route path={AppRoutes.extension.childRoutes.info.match} element={<ExtensionInfo />} />
                    </Route>
                    <Route path={AppRoutes.downloads.match} element={<DownloadQueue />} />
                    <Route path={AppRoutes.manga.match}>
                        <Route path={AppRoutes.manga.childRoutes.reader.match} element={null} />
                        <Route index element={<Manga />} />
                    </Route>
                    <Route path={AppRoutes.library.match} element={<Library />} />
                    <Route path={AppRoutes.updates.match} element={<Updates />} />
                    {!hideHistory && <Route path={AppRoutes.history.match} element={<History />} />}
                    <Route path={AppRoutes.browse.match} element={<Browse />} />
                    <Route path={AppRoutes.migrate.match}>
                        <Route index element={<Migrate />} />
                        <Route path={AppRoutes.migrate.childRoutes.search.match} element={<SearchAll />} />
                    </Route>
                    <Route path={AppRoutes.tracker.match} element={<TrackerOAuthLogin />} />
                </Routes>
            </ErrorBoundary>
        </Box>
    );
};

const ReaderApp = () => (
    <ErrorBoundary>
        <Routes>
            <Route path={AppRoutes.matchAll.match} element={<Reader />} />
        </Routes>
    </ErrorBoundary>
);

export const App: React.FC = () => (
    <AppContext>
        <ScrollToTop />
        <ServerUpdateChecker />
        <WebUIUpdateChecker />
        <BackgroundSubscriptions />
        <CssBaseline enableColorScheme />
        <Box sx={{ display: 'flex' }}>
            <Box sx={{ flexShrink: 0, position: 'relative', height: '100vh' }}>
                <DefaultNavBar />
            </Box>
            <Routes>
                <Route path={AppRoutes.matchAll.match} element={<MainApp />} />
                <Route path={AppRoutes.reader.match} element={<ReaderApp />} />
            </Routes>
        </Box>
    </AppContext>
);


